import java_cup.runtime.*;
import AST.*;

parser code {:
	
	Scanner scanner;
	AST raiz;	

	public parser(java.io.Reader input){
	scanner = new Scanner(input);
	
	}

public String errores(int sys)
{
	if (sys == 0)
		return("Class");
	else if (sys == 1)
		return("ID");
	else if (sys == 2)
		return("Llave_on");
	else if (sys == 3)
		return("Llave_off");
	else if (sys == 4)
		return("Public");
	else if (sys == 5)
		return("Static");
	else if (sys == 6)
		return("Else");
	else if (sys == 7)
		return("Void");
	else if (sys == 8)
		return("Main");
	else if (sys == 9)
		return("PARENT_on");
	else if (sys == 10)
		return("PARENT_off");
	else if (sys == 11)
		return("Corchete_on");
	else if (sys == 12)
		return("Corchete_off");
	else if (sys == 13)
		return("STRING");
	else if (sys == 14 )
		return("Extends");
	else if (sys ==15 )
		return("Return");
	else if (sys == 16)
		return("INT");
	else if (sys == 17)
		return("BOOLEAN");
	else if (sys == 18)
		return("If");
	else if (sys ==19 )
		return("DOTCOMMA");
	else if (sys ==20 )
		return("COMA");
	else if (sys == 21)
		return("Punto");
	else if (sys == 22)
		return("While");
	else if (sys == 23)
		return("System");
	else if (sys == 24)
		return("Out");
	else if (sys == 25)
		return("Println");
	else if (sys == 26)
		return("Lenght");
	else if (sys == 27)
		return("INTEGER_LITERAL");
	else if (sys ==28 )
		return("True");
	else if (sys == 29)
		return("False");
	else if (sys ==30 )
		return("This");
	else if (sys ==31 )
		return("New");
	else if (sys == 32)
		return("Negacion");
	else if (sys == 33)
		return("STRING_CONSTANT");
	else if (sys == 34)
		return("Suma");
	else if (sys == 35)
		return("Resta");
	else if (sys ==36 )
		return("MULT");
	else if (sys ==37 )
		return("Div");
	else if (sys ==38 )
		return("Diferencia");
	else if (sys == 39)
		return("Igual_Comp");
	else if (sys == 40)
		return("Igual_Asig");
	else if (sys == 41)
		return("Menor");
	else if (sys == 42)
		return("Menor_Igual");
	else if (sys ==43 )
		return("Mayor");
	else if (sys == 44)
		return("Mayor_Igual");
	else if (sys ==45 )
		return("OR");
	else if (sys ==46 )
		return("AND");
	else if (sys == 47)
		return("EOF");
	else if (sys == 48)
		return("ERROR");
	else if (sys == 49)
		return("NUM");
	else if (sys == 50)
		return("STR");
	else if (sys == 51)
		return("In");
	else if (sys == 52)
		return("Read");
	else if (sys == 53)
		return("Import");
	else if (sys == 54)
		return("Implements");
	else if (sys == 55)
		return("Exit");		
	else 
		return("error");
}

public void syntax_error(Symbol cur_token2)
{
	if (cur_token.sym == 0)
		report_error("No se esperaba un class", cur_token2);
	else if (cur_token.sym == 2)
		report_error("No se esperaba un ID", cur_token2);
	else if (cur_token.sym == 3)
		report_error("No se esperaba una llave abierta", cur_token2);
	else if (cur_token.sym == 4)
		report_error("No se esperaba una llave cerrada", cur_token2);
	else if (cur_token.sym == 5)
		report_error("No se esperaba un public", cur_token2);
	else if (cur_token.sym == 6)
		report_error("No se esperaba un else", cur_token2);
	else if (cur_token.sym == 7)
		report_error("No se esperaba un void", cur_token2);
	else if (cur_token.sym == 8)
		report_error("No se esperaba un main", cur_token2);
	else if (cur_token.sym == 9)
		report_error("No se esperaba un parentesis abierto", cur_token2);
	else if (cur_token.sym == 10)
		report_error("No se esperaba un parentesis cerrado", cur_token2);
	else if (cur_token.sym == 11)
		report_error("No se esperaba un corchete abierto", cur_token2);
	else if (cur_token.sym == 12)
		report_error("No se esperaba un cochete cerrado", cur_token2);
	else if (cur_token.sym == 13)
		report_error("No se esperaba un string", cur_token2);
	else if (cur_token.sym == 14)
		report_error("No se esperaba un extendes", cur_token2);
	else if (cur_token.sym == 15)
		report_error("No se esperaba un return", cur_token2);
	else if (cur_token.sym == 16)
		report_error("No se esperaba un int", cur_token2);
	else if (cur_token.sym == 17)
		report_error("No se esperaba un boolean", cur_token2);
	else if (cur_token.sym == 18)
		report_error("No se esperaba un if", cur_token2);
	else if (cur_token.sym == 19)
		report_error("No se esperaba un punto y coma", cur_token2);
	else if (cur_token.sym == 20)
		report_error("No se esperaba una coma", cur_token2);
	else if (cur_token.sym == 21)
		report_error("No se esperaba un punto", cur_token2);
	else if (cur_token.sym == 22)
		report_error("No se esperaba un while", cur_token2);
	else if (cur_token.sym == 23)
		report_error("No se esperaba un system", cur_token2);
	else if (cur_token.sym == 24)
		report_error("No se esperaba un out", cur_token2);
	else if (cur_token.sym == 25)
		report_error("No se esperaba un println", cur_token2);
	else if (cur_token.sym == 26)
		report_error("No se esperaba un length", cur_token2);
	else if (cur_token.sym == 27)
		report_error("No se esperaba un INTEGER_LITERAL", cur_token2);
	else if (cur_token.sym == 28)
		report_error("No se esperaba un true", cur_token2);
	else if (cur_token.sym == 29)
		report_error("No se esperaba un false", cur_token2);
	else if (cur_token.sym == 30)
		report_error("No se esperaba un this", cur_token2);
	else if (cur_token.sym == 31)
		report_error("No se esperaba una new", cur_token2);
	else if (cur_token.sym == 32)
		report_error("No se esperaba una negacion ", cur_token2);
	else if (cur_token.sym == 33)
		report_error("No se esperaba un STRING_CONSTANT", cur_token2);
	else if (cur_token.sym == 34)
		report_error("No se esperaba una suma", cur_token2);
	else if (cur_token.sym == 35)
		report_error("No se esperaba una resta ", cur_token2);
	else if (cur_token.sym == 36)
		report_error("No se esperaba una multiplicacion", cur_token2);
	else if (cur_token.sym == 37)
		report_error("No se esperaba una division", cur_token2);
	else if (cur_token.sym == 38)
		report_error("No se esperaba una diferencia", cur_token2);
	else if (cur_token.sym == 39)
		report_error("No se esperaba una comparacion", cur_token2);
	else if (cur_token.sym == 40)
		report_error("No se esperaba una asignacion", cur_token2);
	else if (cur_token.sym == 41)
		report_error("No se esperaba un menor ", cur_token2);
	else if (cur_token.sym == 42)
		report_error("No se esperaba un menor igual", cur_token2);
	else if (cur_token.sym == 43)
		report_error("No se esperaba un mayor", cur_token2);
	else if (cur_token.sym == 44)
		report_error("No se esperaba un mayor igual", cur_token2);
	else if (cur_token.sym == 45)
		report_error("No se esperaba un or", cur_token2);
	else if (cur_token.sym == 46)
		report_error("No se esperaba un and", cur_token2);
	else if (cur_token.sym == 47)
		report_error("No se esperaba un fin de linea", cur_token2);
	else if (cur_token.sym == 48)
		report_error("No se esperaba un ERROR", cur_token2);
	else if (cur_token.sym == 49)
		report_error("No se esperaba un numero", cur_token2);
	else if (cur_token.sym == 50)
		report_error("No se esperaba una string", cur_token2);
	else if (cur_token.sym == 51)
		report_error("No se esperaba una in", cur_token2);
	else if (cur_token.sym == 52)
		report_error("No se esperaba una read", cur_token2);
	else if (cur_token.sym == 53)
		report_error("No se esperaba un import", cur_token2);
	else if (cur_token.sym == 54)
		report_error("No se esperaba un implements", cur_token2);
	else if (cur_token.sym == 55)
		report_error("No se esperaba un exit", cur_token2);		
	else 
		report_error("Error: ", cur_token2);	
}

public void report_error(String message, Object info) {
	StringBuffer m = new StringBuffer("Error ");
	
	if (info instanceof java_cup.runtime.Symbol) {
		m.append( "(" + errores(cur_token.sym) +")" );
	     	m.append(" en fila "+ cur_token.left + " columna " + cur_token.right );
	     
	     	if (((java_cup.runtime.Symbol)info).value != null)
	       		m.append(". Lexema: " + cur_token.value.toString()); 
	}
	m.append(" : "+message);
	//m.append(" y en su lugar viene " + ((java_cup.runtime.Symbol)info).value.toString());

	System.out.println(m);
}

   
public void report_fatal_error(String message, Object info) 	{
	report_error(message, info);
	throw new RuntimeException("Error Fatal de Sintaxis!!!");
}

:}

terminal Symbol ID;
terminal Symbol Llave_off;
terminal Symbol Llave_on;
terminal Symbol PARENT_off;
terminal Symbol PARENT_on;
terminal Symbol BOOLEAN;
terminal Symbol INT;
terminal Symbol DOTCOMMA;
terminal Symbol INTEGER_LITERAL;
terminal Symbol Corchete_off;
terminal Symbol Corchete_on;
terminal Symbol True;
terminal Symbol False;
terminal Symbol STRING_CONSTANT;
terminal Symbol Negacion;
terminal Symbol Suma;
terminal Symbol Resta;
terminal Symbol Public;
terminal Symbol Static;
terminal Symbol Extends;
terminal Symbol Return;
terminal Symbol If;
terminal Symbol COMA;
terminal Symbol Punto;
terminal Symbol While;
terminal Symbol System;
terminal Symbol Out;
terminal Symbol Println;
terminal Symbol Length;
terminal Symbol Else;
terminal Symbol Void;
terminal Symbol Main;
terminal Symbol STRING;
terminal Symbol MULT;
terminal Symbol Div;
terminal Symbol Diferencia;
terminal Symbol Igual_Comp;
terminal Symbol Class;
terminal Symbol This;
terminal Symbol New;
terminal Symbol Igual_Asig;
terminal Symbol Menor;
terminal Symbol Menor_Igual;
terminal Symbol Mayor;
terminal Symbol Mayor_Igual;
terminal Symbol OR;
terminal Symbol AND;
// terminal Symbol ERROR;
// terminal Symbol NUM;
// terminal Symbol STR;
terminal Symbol In;
terminal Symbol Read;
terminal Symbol Import;
terminal Symbol Implements;
terminal Symbol Exit;


non terminal Program;
non terminal ImportDecl;
non terminal ImportDecla;
non terminal ImportDecls;
non terminal ImportDeclsa;
non terminal TypeName;
non terminal TypeNames;
non terminal MainClass;
non terminal ClassDecl;
non terminal ClassDecla;
non terminal ClassDeclsa;
non terminal ClassDeclsb;
non terminal ClassDeclsc;
non terminal Statement;
non terminal Statementa;
non terminal Statementb;
non terminal Statementc;
non terminal Statementd;
non terminal Statements;
non terminal Statementsa;
non terminal BodyDecl;
non terminal Exp;
non terminal Exps;
non terminal Expsa;
non terminal Expsb;
non terminal ExpList;
non terminal ExpLists;
non terminal ExpListsa;
non terminal Type;
non terminal Types;
non terminal Typesa;
non terminal TypeNamesa;
non terminal VarDecl;
non terminal VarDecla;
non terminal ConstrDecl;
non terminal ConstrDecls;
non terminal ClassDecls;
non terminal MethodDecl;
non terminal MethodDecls;
non terminal MethodDecla;
non terminal MethodDeclb;
non terminal Exp_Simpl;
non terminal Op;
non terminal FormalList;


precedence left Return;
precedence left COMA;
precedence left Punto;
precedence left Class;
precedence left PARENT_on;
precedence left Else;
precedence left Llave_off;
precedence left Llave_on;
precedence left INT;
precedence left Suma;
precedence left Resta;
precedence left Div;
precedence left MULT;
precedence left Public;
precedence left BOOLEAN;
precedence left ID;

start with Program;

// Regla 01)
Program ::= ImportDecl ClassDecl MainClass ;

// Regla 02)
ImportDecl ::= ImportDecls ImportDecla ;

// Regla 03)
ImportDecla ::= ImportDecl | ;

// Regla 04)
ImportDecls ::= Import TypeName ImportDeclsa DOTCOMMA ;

// Regla 05)
ImportDeclsa ::= Punto MULT | ;
 
// Regla 06)
TypeName ::= ID TypeNames ;

// Regla 07)
TypeNames ::= Punto ID TypeNamesa ;

// Regla 08)
TypeNamesa ::= TypeNames | ;

// Regla 09)
MainClass ::= Class ID Llave_on Public Static Void Main  PARENT_on  STRING Corchete_on  Corchete_off  ID PARENT_off Llave_on Statement Llave_off Llave_off  ;

// Regla 10)
ClassDecl ::= ClassDecls ClassDecla ;

// Regla 11)
ClassDecla ::= | ClassDecl ;

// Regla 12)
ClassDecls ::= Class ID ClassDeclsc Llave_on BodyDecl Llave_off  ;

// Regla 13)
ClassDeclsa ::= Extends | Implements ;

// Regla 14)
ClassDeclsb ::= ClassDeclsa ID ;

// Regla 15)
ClassDeclsc ::= ClassDeclsb | ;

// Regla 16)
BodyDecl ::= VarDecl | ConstrDecl | MethodDecl | ClassDecl ;

// Regla 17)
VarDecl ::= Type ID  VarDecla ;

// Regla 18)
VarDecla ::= VarDecl DOTCOMMA | ;

// Regla 19)
ConstrDecl ::= Public ID PARENT_on  FormalList PARENT_off Llave_on VarDecl Statement Llave_off  ConstrDecls ;

// Regla 20)
ConstrDecls ::= ConstrDecl | ;

// Regla 21)
MethodDecl ::= Public MethodDecla ID PARENT_on  FormalList  PARENT_off Llave_on VarDecl Statements MethodDeclb Llave_off  MethodDecls ;

// Regla 22)
MethodDecla ::= Type | Void ;

// Regla 23)
MethodDeclb ::= Return Exp DOTCOMMA | ;

// Regla 24)
MethodDecls ::= MethodDecl | ;

// Regla 25)
FormalList ::= Type ID Types | ;

// Regla 26)
Type ::= INT  Corchete_on  Corchete_off 
     | BOOLEAN
     | INT
     | ID ;

// Regla 27)
Types ::= COMA Type ID Typesa ;

// Regla 28)
Typesa ::= | Types ;

// Regla 29)
Statement ::= Llave_on Statements Llave_off 
	  | If PARENT_on  Exp PARENT_off Statement Statementa
       	  | While PARENT_on  Exp PARENT_off Statement
       	  | System Punto Out Punto Println PARENT_on  Exp PARENT_off DOTCOMMA 
	  | System Punto Exit PARENT_on INTEGER_LITERAL PARENT_off DOTCOMMA
          | ID Statementc Igual_Asig Statementd 
	  | Statementb Punto ID  PARENT_on  ExpList PARENT_off ;

// Regla 30)
Statementa ::= Else Statement | ;

// Regla 31)
Statementb ::= This | ID ;

// Regla 32)
Statementc ::= Corchete_on  Exp  Corchete_off | ; 

// Regla 33)
Statementd ::= Exp | PARENT_on  Type PARENT_off System Punto In Punto Read PARENT_on PARENT_off DOTCOMMA ;

// Regla 34)
Statements ::= Statement Statementsa ;

// Regla 35)
Statementsa ::= | Statements ;

// Regla 36)
Exp ::= Exp_Simpl Exps ;

// Regla 37)
Exps ::= PARENT_on Expsa PARENT_off Expsb ;

// Regla 38)
Expsa ::= Op Exp |  Corchete_on  Exp  Corchete_off  |  Punto  Length |  Punto  ID  PARENT_on  ExpList PARENT_off ;

// Regla 39)
Expsb ::= Exps | ;
         
// Regla 40)
Exp_Simpl ::= INTEGER_LITERAL
          | True
          | False
          | ID
          | This
          | New INT  Corchete_on  Exp  Corchete_off 
          | New ID  PARENT_on ExpList PARENT_off
          | Negacion Exp
          | PARENT_on  Exp PARENT_off
	  | STRING_CONSTANT ;

// Regla 41)
ExpList ::= Exp ExpLists | ;

// Regla 42)
ExpLists ::= COMA Exp ExpListsa ;

// Regla 43)
ExpListsa ::= | ExpLists ;

// Regla 44)
Op ::= Suma | Resta | MULT | Div | Diferencia | Igual_Comp | Menor | Menor_Igual | Mayor_Igual | Mayor | OR | AND ;