
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 18 23:45:49 CST 2013
//----------------------------------------------------

import java_cup.runtime.*;
import AST.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 18 23:45:49 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\002\000\002\004\006\000\002\005\004" +
    "\000\002\006\005\000\002\006\002\000\002\007\003\000" +
    "\002\007\002\000\002\010\004\000\002\010\002\000\002" +
    "\011\006\000\002\012\005\000\002\012\002\000\002\013" +
    "\004\000\002\014\003\000\002\014\003\000\002\015\004" +
    "\000\002\015\002\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\017\005\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\021\013\000\002\022\004\000\002\022\002" +
    "\000\002\023\005\000\002\023\002\000\002\024\006\000" +
    "\002\024\002\000\002\025\015\000\002\026\003\000\002" +
    "\026\003\000\002\027\005\000\002\027\002\000\002\030" +
    "\021\000\002\031\006\000\002\031\011\000\002\031\007" +
    "\000\002\031\011\000\002\031\005\000\002\031\010\000" +
    "\002\031\007\000\002\031\013\000\002\032\003\000\002" +
    "\032\014\000\002\033\004\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\007\000\002\034\007\000\002\034\004\000" +
    "\002\034\005\000\002\034\003\000\002\035\004\000\002" +
    "\035\002\000\002\036\005\000\002\036\002\000\002\037" +
    "\004\000\002\037\002\000\002\040\007\000\002\040\004" +
    "\000\002\040\005\000\002\040\004\000\002\042\004\000" +
    "\002\042\002\000\002\043\003\000\002\043\003\000\002" +
    "\044\005\000\002\045\004\000\002\045\002\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\010\030\ufffe\031\ufffe\057\ufffe\001\002\000" +
    "\004\002\310\001\002\000\010\030\006\031\ufff6\057\ufff6" +
    "\001\002\000\004\055\300\001\002\000\010\030\uffff\031" +
    "\uffff\057\uffff\001\002\000\006\031\014\057\ufff3\001\002" +
    "\000\004\002\000\001\002\000\006\031\ufff7\057\ufff7\001" +
    "\002\000\004\057\224\001\002\000\004\055\015\001\002" +
    "\000\010\057\022\060\021\062\017\001\002\000\004\055" +
    "\223\001\002\000\004\055\ufff1\001\002\000\004\057\ufff4" +
    "\001\002\000\004\055\ufff0\001\002\000\004\040\023\001" +
    "\002\000\004\071\024\001\002\000\004\027\025\001\002" +
    "\000\004\011\026\001\002\000\004\014\027\001\002\000" +
    "\004\034\030\001\002\000\004\055\031\001\002\000\004" +
    "\041\032\001\002\000\004\057\033\001\002\000\016\013" +
    "\037\026\040\047\036\052\042\055\034\056\041\001\002" +
    "\000\010\025\172\026\173\050\uffb5\001\002\000\004\020" +
    "\170\001\002\000\004\050\153\001\002\000\004\050\uffb6" +
    "\001\002\000\020\013\uffb2\026\uffb2\047\uffb2\052\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\001\002\000\004\014\144\001\002" +
    "\000\004\014\135\001\002\000\004\050\044\001\002\000" +
    "\004\055\045\001\002\000\004\014\046\001\002\000\026" +
    "\004\062\005\047\013\061\014\060\022\050\041\uffc1\051" +
    "\054\055\057\066\056\072\052\001\002\000\006\055\126" +
    "\070\125\001\002\000\046\006\uffcb\010\uffcb\012\uffcb\015" +
    "\uffcb\021\uffcb\023\uffcb\024\uffcb\026\uffcb\036\uffcb\041\uffcb" +
    "\042\uffcb\044\uffcb\050\uffcb\054\uffcb\063\uffcb\064\uffcb\065" +
    "\uffcb\067\uffcb\001\002\000\006\023\uffbf\041\uffbf\001\002" +
    "\000\046\006\uffc3\010\uffc3\012\uffc3\015\uffc3\021\uffc3\023" +
    "\uffc3\024\uffc3\026\uffc3\036\uffc3\041\uffc3\042\uffc3\044\uffc3" +
    "\050\uffc3\054\uffc3\063\uffc3\064\uffc3\065\uffc3\067\uffc3\001" +
    "\002\000\004\041\120\001\002\000\046\006\uffc9\010\uffc9" +
    "\012\uffc9\015\uffc9\021\uffc9\023\uffc9\024\uffc9\026\uffc9\036" +
    "\uffc9\041\uffc9\042\uffc9\044\uffc9\050\uffc9\054\uffc9\063\uffc9" +
    "\064\uffc9\065\uffc9\067\uffc9\001\002\000\046\006\073\010" +
    "\106\012\102\015\072\021\076\023\uffbd\024\074\026\104" +
    "\036\100\041\uffbd\042\105\044\067\050\071\054\uffbd\063" +
    "\070\064\077\065\066\067\uffbd\001\002\000\046\006\uffca" +
    "\010\uffca\012\uffca\015\uffca\021\uffca\023\uffca\024\uffca\026" +
    "\uffca\036\uffca\041\uffca\042\uffca\044\uffca\050\uffca\054\uffca" +
    "\063\uffca\064\uffca\065\uffca\067\uffca\001\002\000\046\006" +
    "\uffcc\010\uffcc\012\uffcc\015\uffcc\021\uffcc\023\uffcc\024\uffcc" +
    "\026\uffcc\036\uffcc\041\uffcc\042\uffcc\044\uffcc\050\uffcc\054" +
    "\uffcc\063\uffcc\064\uffcc\065\uffcc\067\uffcc\001\002\000\024" +
    "\004\062\005\047\013\061\014\060\022\050\051\054\055" +
    "\057\066\056\072\052\001\002\000\046\006\uffc8\010\uffc8" +
    "\012\uffc8\015\uffc8\021\uffc8\023\uffc8\024\uffc8\026\uffc8\036" +
    "\uffc8\041\uffc8\042\uffc8\044\uffc8\050\uffc8\054\uffc8\063\uffc8" +
    "\064\uffc8\065\uffc8\067\uffc8\001\002\000\024\004\062\005" +
    "\047\013\061\014\060\022\050\051\054\055\057\066\056" +
    "\072\052\001\002\000\046\006\uffc5\010\uffc5\012\uffc5\015" +
    "\uffc5\021\uffc5\023\uffc5\024\uffc5\026\uffc5\036\uffc5\041\uffc5" +
    "\042\uffc5\044\uffc5\050\uffc5\054\uffc5\063\uffc5\064\uffc5\065" +
    "\uffc5\067\uffc5\001\002\000\004\041\065\001\002\000\046" +
    "\006\uffc4\010\uffc4\012\uffc4\015\uffc4\021\uffc4\023\uffc4\024" +
    "\uffc4\026\uffc4\036\uffc4\041\uffc4\042\uffc4\044\uffc4\050\uffc4" +
    "\054\uffc4\063\uffc4\064\uffc4\065\uffc4\067\uffc4\001\002\000" +
    "\024\004\uffa6\005\uffa6\013\uffa6\014\uffa6\022\uffa6\051\uffa6" +
    "\055\uffa6\066\uffa6\072\uffa6\001\002\000\024\004\uffaf\005" +
    "\uffaf\013\uffaf\014\uffaf\022\uffaf\051\uffaf\055\uffaf\066\uffaf" +
    "\072\uffaf\001\002\000\024\004\uffac\005\uffac\013\uffac\014" +
    "\uffac\022\uffac\051\uffac\055\uffac\066\uffac\072\uffac\001\002" +
    "\000\006\045\114\055\113\001\002\000\024\004\uffab\005" +
    "\uffab\013\uffab\014\uffab\022\uffab\051\uffab\055\uffab\066\uffab" +
    "\072\uffab\001\002\000\024\004\uffb1\005\uffb1\013\uffb1\014" +
    "\uffb1\022\uffb1\051\uffb1\055\uffb1\066\uffb1\072\uffb1\001\002" +
    "\000\024\004\uffa9\005\uffa9\013\uffa9\014\uffa9\022\uffa9\051" +
    "\uffa9\055\uffa9\066\uffa9\072\uffa9\001\002\000\046\006\073" +
    "\010\106\012\102\015\072\021\076\023\uffbd\024\074\026" +
    "\104\036\100\041\uffbd\042\105\044\067\050\071\054\uffbd" +
    "\063\070\064\077\065\066\067\uffbd\001\002\000\024\004" +
    "\uffad\005\uffad\013\uffad\014\uffad\022\uffad\051\uffad\055\uffad" +
    "\066\uffad\072\uffad\001\002\000\024\004\uffa8\005\uffa8\013" +
    "\uffa8\014\uffa8\022\uffa8\051\uffa8\055\uffa8\066\uffa8\072\uffa8" +
    "\001\002\000\024\004\uffae\005\uffae\013\uffae\014\uffae\022" +
    "\uffae\051\uffae\055\uffae\066\uffae\072\uffae\001\002\000\024" +
    "\004\062\005\047\013\061\014\060\022\050\051\054\055" +
    "\057\066\056\072\052\001\002\000\024\004\uffb0\005\uffb0" +
    "\013\uffb0\014\uffb0\022\uffb0\051\uffb0\055\uffb0\066\uffb0\072" +
    "\uffb0\001\002\000\046\006\uffcd\010\uffcd\012\uffcd\015\uffcd" +
    "\021\uffcd\023\uffcd\024\uffcd\026\uffcd\036\uffcd\041\uffcd\042" +
    "\uffcd\044\uffcd\050\uffcd\054\uffcd\063\uffcd\064\uffcd\065\uffcd" +
    "\067\uffcd\001\002\000\024\004\062\005\047\013\061\014" +
    "\060\022\050\051\054\055\057\066\056\072\052\001\002" +
    "\000\024\004\uffa7\005\uffa7\013\uffa7\014\uffa7\022\uffa7\051" +
    "\uffa7\055\uffa7\066\uffa7\072\uffa7\001\002\000\024\004\uffaa" +
    "\005\uffaa\013\uffaa\014\uffaa\022\uffaa\051\uffaa\055\uffaa\066" +
    "\uffaa\072\uffaa\001\002\000\004\054\110\001\002\000\046" +
    "\006\uffba\010\uffba\012\uffba\015\uffba\021\uffba\023\uffba\024" +
    "\uffba\026\uffba\036\uffba\041\uffba\042\uffba\044\uffba\050\uffba" +
    "\054\uffba\063\uffba\064\uffba\065\uffba\067\uffba\001\002\000" +
    "\046\006\uffbb\010\uffbb\012\uffbb\015\uffbb\021\uffbb\023\uffbb" +
    "\024\uffbb\026\uffbb\036\uffbb\041\uffbb\042\uffbb\044\uffbb\050" +
    "\uffbb\054\uffbb\063\uffbb\064\uffbb\065\uffbb\067\uffbb\001\002" +
    "\000\046\006\uffbe\010\uffbe\012\uffbe\015\uffbe\021\uffbe\023" +
    "\uffbe\024\uffbe\026\uffbe\036\uffbe\041\uffbe\042\uffbe\044\uffbe" +
    "\050\uffbe\054\uffbe\063\uffbe\064\uffbe\065\uffbe\067\uffbe\001" +
    "\002\000\004\014\115\001\002\000\046\006\uffb9\010\uffb9" +
    "\012\uffb9\015\uffb9\021\uffb9\023\uffb9\024\uffb9\026\uffb9\036" +
    "\uffb9\041\uffb9\042\uffb9\044\uffb9\050\uffb9\054\uffb9\063\uffb9" +
    "\064\uffb9\065\uffb9\067\uffb9\001\002\000\026\004\062\005" +
    "\047\013\061\014\060\022\050\041\uffc1\051\054\055\057" +
    "\066\056\072\052\001\002\000\004\041\117\001\002\000" +
    "\046\006\uffbc\010\uffbc\012\uffbc\015\uffbc\021\uffbc\023\uffbc" +
    "\024\uffbc\026\uffbc\036\uffbc\041\uffbc\042\uffbc\044\uffbc\050" +
    "\uffbc\054\uffbc\063\uffbc\064\uffbc\065\uffbc\067\uffbc\001\002" +
    "\000\004\067\121\001\002\000\026\013\uffd6\017\uffd6\020" +
    "\uffd6\026\uffd6\033\uffd6\047\uffd6\052\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\001\002\000\006\023\123\041\uffc2\001\002\000" +
    "\024\004\062\005\047\013\061\014\060\022\050\051\054" +
    "\055\057\066\056\072\052\001\002\000\006\023\uffc0\041" +
    "\uffc0\001\002\000\004\026\132\001\002\000\004\014\127" +
    "\001\002\000\026\004\062\005\047\013\061\014\060\022" +
    "\050\041\uffc1\051\054\055\057\066\056\072\052\001\002" +
    "\000\004\041\131\001\002\000\046\006\uffc6\010\uffc6\012" +
    "\uffc6\015\uffc6\021\uffc6\023\uffc6\024\uffc6\026\uffc6\036\uffc6" +
    "\041\uffc6\042\uffc6\044\uffc6\050\uffc6\054\uffc6\063\uffc6\064" +
    "\uffc6\065\uffc6\067\uffc6\001\002\000\024\004\062\005\047" +
    "\013\061\014\060\022\050\051\054\055\057\066\056\072" +
    "\052\001\002\000\004\054\134\001\002\000\046\006\uffc7" +
    "\010\uffc7\012\uffc7\015\uffc7\021\uffc7\023\uffc7\024\uffc7\026" +
    "\uffc7\036\uffc7\041\uffc7\042\uffc7\044\uffc7\050\uffc7\054\uffc7" +
    "\063\uffc7\064\uffc7\065\uffc7\067\uffc7\001\002\000\024\004" +
    "\062\005\047\013\061\014\060\022\050\051\054\055\057" +
    "\066\056\072\052\001\002\000\004\041\137\001\002\000" +
    "\016\013\037\026\040\047\036\052\042\055\034\056\041" +
    "\001\002\000\026\013\uffb7\017\uffb7\020\uffb7\026\uffb7\033" +
    "\141\047\uffb7\052\uffb7\054\uffb7\055\uffb7\056\uffb7\001\002" +
    "\000\016\013\037\026\040\047\036\052\042\055\034\056" +
    "\041\001\002\000\026\013\uffd2\017\uffd2\020\uffd2\026\uffd2" +
    "\033\uffd2\047\uffd2\052\uffd2\054\uffd2\055\uffd2\056\uffd2\001" +
    "\002\000\026\013\uffb8\017\uffb8\020\uffb8\026\uffb8\033\uffb8" +
    "\047\uffb8\052\uffb8\054\uffb8\055\uffb8\056\uffb8\001\002\000" +
    "\024\004\062\005\047\013\061\014\060\022\050\051\054" +
    "\055\057\066\056\072\052\001\002\000\004\041\146\001" +
    "\002\000\016\013\037\026\040\047\036\052\042\055\034" +
    "\056\041\001\002\000\026\013\uffd1\017\uffd1\020\uffd1\026" +
    "\uffd1\033\uffd1\047\uffd1\052\uffd1\054\uffd1\055\uffd1\056\uffd1" +
    "\001\002\000\020\013\037\026\040\047\036\052\042\054" +
    "\152\055\034\056\041\001\002\000\024\013\uffb3\017\uffb3" +
    "\020\uffb3\026\uffb3\047\uffb3\052\uffb3\054\uffb3\055\uffb3\056" +
    "\uffb3\001\002\000\026\013\uffd3\017\uffd3\020\uffd3\026\uffd3" +
    "\033\uffd3\047\uffd3\052\uffd3\054\uffd3\055\uffd3\056\uffd3\001" +
    "\002\000\006\007\155\061\154\001\002\000\004\050\162" +
    "\001\002\000\004\014\156\001\002\000\004\051\157\001" +
    "\002\000\004\041\160\001\002\000\004\067\161\001\002" +
    "\000\026\013\uffd4\017\uffd4\020\uffd4\026\uffd4\033\uffd4\047" +
    "\uffd4\052\uffd4\054\uffd4\055\uffd4\056\uffd4\001\002\000\004" +
    "\016\163\001\002\000\004\014\164\001\002\000\024\004" +
    "\062\005\047\013\061\014\060\022\050\051\054\055\057" +
    "\066\056\072\052\001\002\000\004\041\166\001\002\000" +
    "\004\067\167\001\002\000\026\013\uffd0\017\uffd0\020\uffd0" +
    "\026\uffd0\033\uffd0\047\uffd0\052\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\001\002\000\004\020\171\001\002\000\004\002\uffd8" +
    "\001\002\000\024\004\062\005\047\013\061\014\200\022" +
    "\050\051\054\055\057\066\056\072\052\001\002\000\024" +
    "\004\062\005\047\013\061\014\060\022\050\051\054\055" +
    "\057\066\056\072\052\001\002\000\004\025\175\001\002" +
    "\000\024\004\062\005\047\013\061\014\200\022\050\051" +
    "\054\055\057\066\056\072\052\001\002\000\004\067\216" +
    "\001\002\000\004\067\uffcf\001\002\000\034\004\062\005" +
    "\047\013\061\014\060\022\050\032\202\037\205\051\054" +
    "\053\203\055\057\066\056\070\204\072\052\001\002\000" +
    "\004\041\206\001\002\000\006\041\uffe5\055\uffe5\001\002" +
    "\000\006\041\uffe8\055\uffe8\001\002\000\006\041\uffe6\055" +
    "\uffe6\001\002\000\006\041\uffe7\055\uffe7\001\002\000\004" +
    "\047\207\001\002\000\004\050\210\001\002\000\004\043" +
    "\211\001\002\000\004\050\212\001\002\000\004\035\213" +
    "\001\002\000\004\014\214\001\002\000\004\041\215\001" +
    "\002\000\004\067\uffce\001\002\000\026\013\uffd5\017\uffd5" +
    "\020\uffd5\026\uffd5\033\uffd5\047\uffd5\052\uffd5\054\uffd5\055" +
    "\uffd5\056\uffd5\001\002\000\004\054\220\001\002\000\004" +
    "\025\uffb4\001\002\000\004\067\222\001\002\000\026\013" +
    "\uffd7\017\uffd7\020\uffd7\026\uffd7\033\uffd7\047\uffd7\052\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\001\002\000\004\057\ufff2\001" +
    "\002\000\022\020\uffee\031\uffee\032\uffee\037\uffee\040\uffee" +
    "\053\uffee\057\uffee\070\uffee\001\002\000\022\020\233\031" +
    "\236\032\202\037\205\040\227\053\203\057\ufff3\070\204" +
    "\001\002\000\004\055\276\001\002\000\016\027\243\032" +
    "\202\037\205\053\203\055\240\070\204\001\002\000\022" +
    "\020\uffeb\031\uffeb\032\uffeb\037\uffeb\040\uffeb\053\uffeb\057" +
    "\uffeb\070\uffeb\001\002\000\022\020\uffea\031\uffea\032\uffea" +
    "\037\uffea\040\uffea\053\uffea\057\uffea\070\uffea\001\002\000" +
    "\022\020\uffed\031\uffed\032\uffed\037\uffed\040\uffed\053\uffed" +
    "\057\uffed\070\uffed\001\002\000\022\020\ufff5\031\ufff5\032" +
    "\ufff5\037\ufff5\040\ufff5\053\ufff5\057\ufff5\070\ufff5\001\002" +
    "\000\022\020\uffec\031\uffec\032\uffec\037\uffec\040\uffec\053" +
    "\uffec\057\uffec\070\uffec\001\002\000\022\020\uffef\031\uffef" +
    "\032\uffef\037\uffef\040\uffef\053\uffef\057\uffef\070\uffef\001" +
    "\002\000\004\055\237\001\002\000\006\060\021\062\017" +
    "\001\002\000\004\014\267\001\002\000\004\055\244\001" +
    "\002\000\004\055\uffdc\001\002\000\004\055\uffdb\001\002" +
    "\000\004\014\245\001\002\000\014\032\202\037\205\041" +
    "\uffe0\053\203\070\204\001\002\000\004\041\255\001\002" +
    "\000\004\055\250\001\002\000\006\023\uffde\041\uffde\001" +
    "\002\000\006\023\252\041\uffe1\001\002\000\012\032\202" +
    "\037\205\053\203\070\204\001\002\000\004\055\254\001" +
    "\002\000\006\023\uffdf\041\uffdf\001\002\000\004\057\256" +
    "\001\002\000\032\013\uffe2\017\uffe2\020\uffe2\026\uffe2\032" +
    "\uffe2\037\uffe2\047\uffe2\052\uffe2\053\uffe2\055\uffe2\056\uffe2" +
    "\070\uffe2\001\002\000\032\013\uffb2\017\uffb2\020\uffb2\026" +
    "\uffb2\032\202\037\205\047\uffb2\052\uffb2\053\203\055\uffb2" +
    "\056\uffb2\070\204\001\002\000\032\013\uffe3\017\uffe3\020" +
    "\uffe3\026\uffe3\032\uffe3\037\uffe3\047\uffe3\052\uffe3\053\uffe3" +
    "\055\uffe3\056\uffe3\070\uffe3\001\002\000\022\013\037\017" +
    "\263\020\uffd9\026\040\047\036\052\042\055\034\056\041" +
    "\001\002\000\004\020\266\001\002\000\024\004\062\005" +
    "\047\013\061\014\060\022\050\051\054\055\057\066\056" +
    "\072\052\001\002\000\004\067\265\001\002\000\004\020" +
    "\uffda\001\002\000\022\020\uffdd\031\uffdd\032\uffdd\037\uffdd" +
    "\040\uffdd\053\uffdd\057\uffdd\070\uffdd\001\002\000\014\032" +
    "\202\037\205\041\uffe0\053\203\070\204\001\002\000\004" +
    "\041\271\001\002\000\004\057\272\001\002\000\012\032" +
    "\202\037\205\053\203\070\204\001\002\000\016\013\037" +
    "\026\040\047\036\052\042\055\034\056\041\001\002\000" +
    "\004\020\275\001\002\000\022\020\uffe4\031\uffe4\032\uffe4" +
    "\037\uffe4\040\uffe4\053\uffe4\057\uffe4\070\uffe4\001\002\000" +
    "\004\067\277\001\002\000\040\013\uffe9\017\uffe9\020\uffe9" +
    "\026\uffe9\031\uffe9\032\uffe9\037\uffe9\040\uffe9\047\uffe9\052" +
    "\uffe9\053\uffe9\055\uffe9\056\uffe9\057\uffe9\070\uffe9\001\002" +
    "\000\010\046\ufffa\050\ufffa\067\ufffa\001\002\000\006\046" +
    "\303\067\ufff8\001\002\000\004\067\304\001\002\000\004" +
    "\067\ufff9\001\002\000\010\030\ufffd\031\ufffd\057\ufffd\001" +
    "\002\000\010\046\ufffc\050\306\067\ufffc\001\002\000\004" +
    "\055\307\001\002\000\010\046\ufffb\050\ufffb\067\ufffb\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\004\006\010\007\001\001\000\004\005\300" +
    "\001\001\000\002\001\001\000\010\011\011\012\012\030" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\017\014\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\034\043\042\001\001\000\004\044\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\050\034\054\035\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\037\102\040\074\041\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\063\034\054\001\001\000\002" +
    "\001\001\000\006\033\062\034\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\037\111\040\074\041\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\110\034\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\106\034\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\050\034\054\035\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\123\034\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\033\050" +
    "\034\054\035\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\132\034\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\135\034\054\001\001\000" +
    "\002\001\001\000\006\031\137\043\042\001\001\000\004" +
    "\042\141\001\001\000\006\031\142\043\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\144\034\054" +
    "\001\001\000\002\001\001\000\006\031\146\043\042\001" +
    "\001\000\002\001\001\000\006\031\150\043\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\164\034\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\220\033\176" +
    "\034\054\001\001\000\006\033\216\034\054\001\001\000" +
    "\002\001\001\000\010\032\175\033\176\034\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\200\033" +
    "\063\034\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\224\001\001\000\020\011\230" +
    "\012\012\016\234\017\231\020\225\021\233\025\227\001" +
    "\001\000\002\001\001\000\006\020\241\026\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\017\014\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\246\023\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\250\001\001" +
    "\000\002\001\001\000\004\020\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\256" +
    "\001\001\000\010\017\257\020\225\045\260\001\001\000" +
    "\002\001\001\000\010\027\261\031\150\043\042\001\001" +
    "\000\002\001\001\000\006\033\263\034\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\246\023\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\272\020\225\001\001\000\006\031\273" +
    "\043\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\304\001\001" +
    "\000\004\007\301\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	Scanner scanner;
	AST raiz;	

	public parser(java.io.Reader input){
	scanner = new Scanner(input);
	
	}

public String errores(int sys)
	{
		if (sys == 2)
			return("IMPORT");
		else if (sys == 3)
			return("PUNTO");
		else if (sys == 4)
			return("ASTERISCO");
		else if (sys == 5)
			return("PUNTO_COMA");
		else if (sys == 6)
			return("ID");
		else if (sys == 7)
			return("CLASS");
		else if (sys == 8)
			return("PUBLIC");
		else if (sys == 9)
			return("STATIC");
		else if (sys == 10)
			return("VOID");
		else if (sys == 11)
			return("MAIN");
		else if (sys == 12)
			return("TSTRING");
		else if (sys == 13)
			return("CORCHETE_ON");
		else if (sys == 14)
			return("CORCHETE_OFF");
		else if (sys == 15)
			return("PARENT_ON");
		else if (sys == 16)
			return("PARENT_OFF");
		else if (sys == 17)
			return("LLAVE_OFF");
		else if (sys == 18)
			return("LLAVE_ON");
		else if (sys == 19)
			return("EXTENDS");
		else if (sys == 20)
			return("IMPLEMENTS");
		else if (sys == 21)
			return("RETURN");
		else if (sys == 22)
			return("COMA");
		else if (sys == 23)
			return("BOOLEAN");
		else if (sys == 24)
			return("IF");
		else if (sys == 25)
			return("ELSE");
		else if (sys == 26)
			return("WHILE");
		else if (sys == 27)
			return("SYSTEM");
		else if (sys == 28)
			return("OUT");	
		else if (sys == 29)
			return("PRINTLN");
		else if (sys == 30)
			return("EXIT");
		else if (sys == 31)
			return("TINT");
		else if (sys == 32)
			return("IGUAL");
		else if (sys == 33)
			return("IN");
		else if (sys == 34)
			return("NUMERO");
		else if (sys == 35)
			return("READ");
		else if (sys == 36)
			return("THIS");
		else if (sys == 37)
			return("LENGTH");
		else if (sys == 38)
			return("TRUE");
		else if (sys == 39)
			return("FALSE");
		else if (sys == 40)
			return("NEW");
		else if (sys == 41)
			return("NEGACION");
		else if (sys == 42)
			return("STRING");
		else if (sys == 43)
			return("SUMA");
		else if (sys == 44)
			return("RESTA");
		else if (sys == 45)
			return("DIV");
		else if (sys == 46)
			return("DIFERENCIA");
		else if (sys == 47)
			return("IGUAL_COMP");
		else if (sys == 48)
			return("MENOR");
		else if (sys == 49)
			return("MENOR_IGUAL");
		else if (sys == 50)
			return("MAYOR_IGUAL");
		else if (sys == 51)
			return("MAYOR");
		else if (sys == 52)
			return("OR");
		else if (sys == 53)
			return("AND");
		else if (sys == 54)
			return("PUNTO_AST");
		else if (sys == 55)
			return("TINT");
		else if (sys == 56)
			return("ID2");
		else if (sys == 57)
			return("INT");
		else 
			return("ERROR");
	}

	public void syntax_error(Symbol cur_token2)
	{
                if (cur_token.sym == 2)
                        report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 3)
			report_error("No se esperaba un .", cur_token2);
		else if (cur_token.sym == 4)
			report_error("No se esperaba un *", cur_token2);
		else if (cur_token.sym == 5)
			report_error("No se esperaba un ;", cur_token2);
		else if (cur_token.sym == 6)
			report_error("No se esperaba un ID", cur_token2);
		else if (cur_token.sym == 7)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 8)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 9)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 10)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 11)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 12)
			report_error("No se esperaba un Tipo STRING", cur_token2);
		else if (cur_token.sym == 13)
			report_error("No se esperaba un [", cur_token2);
		else if (cur_token.sym == 14)
			report_error("No se esparaba un ]", cur_token2);
		else if (cur_token.sym == 15)
			report_error("No se esperaba un (", cur_token2);
		else if (cur_token.sym == 16)
			report_error("No se esperaba un )", cur_token2);
		else if (cur_token.sym == 17)
			report_error("No se esperaba un }", cur_token2);
		else if (cur_token.sym == 18)
			report_error("No se esperaba un {", cur_token2);
		else if (cur_token.sym == 19)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 20)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 21)
			report_error("No se esperaba un RETURN", cur_token2);
		else if (cur_token.sym == 22)
			report_error("No se esparaba una ,", cur_token2);
		else if (cur_token.sym == 23)
			report_error("No se esperaba un Boolean", cur_token2);
		else if (cur_token.sym == 24)
			report_error("No se esperaba un IF", cur_token2);
		else if (cur_token.sym == 25)
			report_error("No se esperaba un ELSE", cur_token2);
		else if (cur_token.sym == 26)
			report_error("No se esperaba un WHILE", cur_token2);
		else if (cur_token.sym == 27)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 28)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 29)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 30)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 31)
			report_error("No se esperaba un Tipo INT", cur_token2);
		else if (cur_token.sym == 32)
			report_error("No se esperaba un =", cur_token2);
		else if (cur_token.sym == 33)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 34)
			report_error("No se esperaba un Numero", cur_token2);
		else if (cur_token.sym == 35)
			report_error("No se esparaba un TOKEN", cur_token2);
		else if (cur_token.sym == 36)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 37)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 38)
			report_error("No se esperaba un TRUE", cur_token2);
		else if (cur_token.sym == 39)
			report_error("No se esperaba un FALSE", cur_token2);
		else if (cur_token.sym == 40)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 41)
			report_error("No se esparaba un !", cur_token2);
		else if (cur_token.sym == 42)
			report_error("No se esperaba un STRING", cur_token2);
		else if (cur_token.sym == 43)
			report_error("No se esperaba un +", cur_token2);
		else if (cur_token.sym == 44)
			report_error("No se esperaba un -", cur_token2);
		else if (cur_token.sym == 45)
			report_error("No se esperaba una /", cur_token2);
		else if (cur_token.sym == 46)
			report_error("No se esperaba un !=", cur_token2);
		else if (cur_token.sym == 47)
			report_error("No se esperaba un ==", cur_token2);
		else if (cur_token.sym == 48)
			report_error("No se esperaba un <", cur_token2);
		else if (cur_token.sym == 49)
			report_error("No se esperaba un <=", cur_token2);
		else if (cur_token.sym == 50)
			report_error("No se esperaba un >=", cur_token2);
		else if (cur_token.sym == 51)
			report_error("No se esperaba un >", cur_token2);
		else if (cur_token.sym == 52)
			report_error("No se esperaba un ||", cur_token2);
		else if (cur_token.sym == 53)
			report_error("No se esperaba un &&", cur_token2);
		else if (cur_token.sym == 54)
			report_error("No se esperaba un .*", cur_token2);
		else if (cur_token.sym == 55)
			report_error("No se esperaba un Tipo TINT[]", cur_token2);
		else if (cur_token.sym == 56)
			report_error("No se esperaba un ID", cur_token2);
		else if (cur_token.sym == 57)
			report_error("No se esperaba un Tipo INT", cur_token2);
		else 
			report_error("Error: ", cur_token2);
	
	}

public void report_error(String message, Object info) {
	StringBuffer m = new StringBuffer("Error ");
	
	if (info instanceof java_cup.runtime.Symbol) {
		m.append( "(" + errores(cur_token.sym) +")" );
	     	m.append(" en fila "+ cur_token.left + " columna " + cur_token.right );
	     
	     	if (((java_cup.runtime.Symbol)info).value != null)
	       		m.append(". Lexema: " + cur_token.value.toString()); 
	}
	m.append(" : "+message);
	m.append(" y en su lugar viene " + ((java_cup.runtime.Symbol)info).value.toString());

	System.out.println(m);
}

   
public void report_fatal_error(String message, Object info) 	{
	report_error(message, info);
	throw new RuntimeException("Error Fatal de Sintaxis!!!");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Op ::= AND 
            {
              Op_AST RESULT =null;
		
		RESULT = new Op_AND_AST();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Op ::= OR 
            {
              Op_AST RESULT =null;
		
		RESULT = new Op_OR_AST();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Op ::= MAYOR 
            {
              Op_AST RESULT =null;
		
		RESULT = new Op_MAYOR_AST();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Op ::= MAYOR_IGUAL 
            {
              Op_AST RESULT =null;
		
		RESULT = new Op_MAYOR_IGUAL_AST();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Op ::= MENOR_IGUAL 
            {
              Op_AST RESULT =null;
		
		RESULT = new Op_MENOR_IGUAL_AST();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Op ::= MENOR 
            {
              Op_AST RESULT =null;
		
		RESULT = new Op_MENOR_AST();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Op ::= IGUAL_COMP 
            {
              Op_AST RESULT =null;
		
		RESULT = new Op_IGUAL_AST();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Op ::= DIFERENCIA 
            {
              Op_AST RESULT =null;
		
		RESULT = new Op_DIFERENCIA_AST();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Op ::= DIV 
            {
              Op_AST RESULT =null;
		
		RESULT = new Op_DIV_AST();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Op ::= ASTERISCO 
            {
              Op_AST RESULT =null;
		
		RESULT = new Op_ASTERISCO_AST();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Op ::= RESTA 
            {
              Op_AST RESULT =null;
		
		RESULT = new Op_RESTA_AST();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Op ::= SUMA 
            {
              Op_AST RESULT =null;
		
		RESULT = new Op_SUMA_AST();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Op",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Statements ::= 
            {
              Statements_AST RESULT =null;
		   
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Statements ::= Statements Statement 
            {
              Statements_AST RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements_AST ss = (Statements_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement_AST s = (Statement_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new varias_Statements_AST(s,ss); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ExpB ::= CORCHETE_ON Exp CORCHETE_OFF 
            {
              ExpresionB_AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion_AST e = (Expresion_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new u_Expression_AST(e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpB",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IDAux ::= ID 
            {
              IdAux_AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol id = new Symbol(sym.ID,izq,der,i);
        RESULT = new THIS_ID_AST(id);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDAux",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IDAux ::= THIS 
            {
              IdAux_AST RESULT =null;
		
        RESULT = new THIS_THIS_AST();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDAux",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // StatementA ::= 
            {
              StatementA_AST RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // StatementA ::= ELSE Statement 
            {
              StatementA_AST RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement_AST S = (Statement_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ELSE_Statement_AST(s);  
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Types ::= PUNTO LENGTH 
            {
              TipysAST RESULT =null;
		
        RESULT= new Type_LENGTH_AST();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Types ::= CORCHETE_ON Exp CORCHETE_OFF 
            {
              TipysAST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion_AST e = (Expresion_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Type_E_C_AST(e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Types ::= Op Exp 
            {
              TipysAST RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Op_AST o = (Op_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion_AST e = (Expresion_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Type_Op_AST(o,e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Types ::= PUNTO ID PARENT_ON ExpList PARENT_OFF 
            {
              TipysAST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpresionList_AST el = (ExpresionList_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Symbol id = new Symbol(sym.ID,izq,der,i);
        RESULT = new Type_EList_AST(id,el);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ExpI ::= 
            {
              ExpresionInt_AST RESULT =null;
		
        RESULT = null; 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpI",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ExpI ::= Types ExpI 
            {
              ExpresionInt_AST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipysAST t = (TipysAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionInt_AST ei = (ExpresionInt_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Exp_TyE_AST(t,ei);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpI",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExpLists ::= 
            {
              ExpresionLists_AST RESULT =null;
		
        RESULT = null; 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpLists",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExpLists ::= ExpLists COMA Exp 
            {
              ExpresionLists_AST RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionLists_AST el = (ExpresionLists_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion_AST e = (Expresion_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new varias_Expression_LIST_AST(e,el);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpLists",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExpList ::= 
            {
              ExpresionList_AST RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpList",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExpList ::= Exp ExpLists 
            {
              ExpresionList_AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion_AST e = (Expresion_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionLists_AST el = (ExpresionLists_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new  Expression_LIST_AST(e,el); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpList",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExpSimpl ::= STRING 
            {
              ExpresionSimpl_AST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol ss = new Symbol(sym.STRING,izq,der,s);
        RESULT = new Exp_Simple_STRING_AST(ss);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpSimpl",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExpSimpl ::= PARENT_ON Exp PARENT_OFF 
            {
              ExpresionSimpl_AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion_AST e = (Expresion_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Expre_AST(e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpSimpl",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExpSimpl ::= NEGACION Exp 
            {
              ExpresionSimpl_AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion_AST e = (Expresion_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Expre_NEGACION_AST(e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpSimpl",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExpSimpl ::= NEW ID PARENT_ON ExpList PARENT_OFF 
            {
              ExpresionSimpl_AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpresionList_AST e = (ExpresionList_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Symbol id = new Symbol(sym.ID,izq,der,i);
        RESULT = new Expre_NEWID_AST(id,e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpSimpl",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExpSimpl ::= NEW TINT CORCHETE_ON Exp CORCHETE_OFF 
            {
              ExpresionSimpl_AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion_AST e = (Expresion_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Expre_NEWINT_AST(e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpSimpl",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExpSimpl ::= THIS 
            {
              ExpresionSimpl_AST RESULT =null;
		
        RESULT= new Exp_Simple_THIS_AST();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpSimpl",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExpSimpl ::= NUMERO 
            {
              ExpresionSimpl_AST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol nn = new Symbol(sym.NUMERO,izq,der,n);
        RESULT= new Exp_Simple_NUMERO_AST(nn);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpSimpl",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExpSimpl ::= FALSE 
            {
              ExpresionSimpl_AST RESULT =null;
		
        RESULT= new Exp_Simple_FALSE_AST();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpSimpl",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExpSimpl ::= TRUE 
            {
              ExpresionSimpl_AST RESULT =null;
		
        RESULT= new Exp_Simple_TRUE_AST();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpSimpl",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpSimpl ::= ID 
            {
              ExpresionSimpl_AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol id = new Symbol(sym.ID,izq,der,i);
        RESULT = new Exp_Simple_lId_AST(id);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpSimpl",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Exp ::= ExpSimpl ExpI 
            {
              Expresion_AST RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpresionSimpl_AST es = (ExpresionSimpl_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionInt_AST ei = (ExpresionInt_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new D_Exp_AST(es,ei);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExpA ::= PARENT_ON Type PARENT_OFF SYSTEM PUNTO IN PUNTO READ PARENT_ON PARENT_OFF 
            {
              ExpresionA_AST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Type_AST t = (Type_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		
        RESULT = new Expression_Read_AST(t);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpA",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpA ::= Exp 
            {
              ExpresionA_AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion_AST e = (Expresion_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new  Exp_AST(e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpA",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= SYSTEM PUNTO OUT PUNTO PRINTLN PARENT_ON Exp PARENT_OFF PUNTO_COMA 
            {
              Statement_AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion_AST e = (Expresion_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = new println_Statement_AST(e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statement ::= WHILE PARENT_ON Exp PARENT_OFF Statement 
            {
              Statement_AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion_AST e = (Expresion_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement_AST s = (Statement_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new while_Statement_AST(e,s);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= IF PARENT_ON Exp PARENT_OFF Statement StatementA 
            {
              Statement_AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion_AST e = (Expresion_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement_AST s = (Statement_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementA_AST ea = (StatementA_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new if_else_Statement_AST(e,s,ea);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= CORCHETE_ON Statements CORCHETE_OFF 
            {
              Statement_AST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements_AST s = (Statements_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new var_Statement_AST(s);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= SYSTEM PUNTO EXIT PARENT_ON NUMERO PARENT_OFF PUNTO_COMA 
            {
              Statement_AST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Symbol n = new Symbol(sym.NUMERO,izq,der,n);
        RESULT = new exit_Stat_AST(n1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= ID ExpB IGUAL ExpA PUNTO_COMA 
            {
              Statement_AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ebleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExpresionB_AST eb = (ExpresionB_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpresionA_AST ea = (ExpresionA_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Symbol id = new Symbol(sym.ID,izq,der,i);
        RESULT = new Expre_Stat_AST(id,eb,ea);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= IDAux PUNTO ID PARENT_ON ExpList PARENT_OFF PUNTO_COMA 
            {
              Statement_AST RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		IdAux_AST ia = (IdAux_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionList_AST el = (ExpresionList_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Symbol id = new Symbol(sym.ID,izq,der,i);
        RESULT = new Explist_Stat_AST(id,ia,el);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statement ::= ID IGUAL ExpA PUNTO_COMA 
            {
              Statement_AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpresionA_AST ea = (ExpresionA_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Symbol id = new Symbol(sym.ID,izq,der,i);
        RESULT = new asignacion_Stat_AST(id,ea);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MainClass ::= CLASS ID LLAVE_ON PUBLIC STATIC VOID MAIN PARENT_ON TSTRING ID PARENT_OFF LLAVE_ON Statement LLAVE_OFF LLAVE_OFF 
            {
              MainClass_AST RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement_AST s = (Statement_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Symbol i1 = new Symbol(sym.ID,izq1,der2,i1);    
        Symbol i2 = new Symbol(sym.ID,izq2,der2,i2); 
        RESULT = new MainC_AST(i1,i2,s);  
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainClass",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Auxiliar ::= 
            {
              Return_AST RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Auxiliar",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Auxiliar ::= RETURN Exp PUNTO_COMA 
            {
              Return_AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion_AST e = (Expresion_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new D_Return_AST(e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Auxiliar",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IdAux ::= VOID 
            {
              IdAux_AST RESULT =null;
		
        RESULT = new c_Void_AST();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdAux",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IdAux ::= Type 
            {
              IdAux_AST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type_AST t = (Type_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new c_Id_AST(t);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdAux",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodDecl ::= PUBLIC IdAux ID PARENT_ON FormalList PARENT_OFF LLAVE_ON VarDecls Statements Auxiliar LLAVE_OFF 
            {
              MethodDeclaration_AST RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		IdAux_AST ia = (IdAux_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int flsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int flsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		FormalList_AST fls = (FormalList_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclarations_AST vd = (VarDeclarations_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements_AST s = (Statements_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Return_AST a = (Return_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Symbol id = new Symbol(sym.ID,izq,der,i);  
        RESULT = new MethodDecl_AST(id,ia,fls,vd,s,a);   
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FormalLists ::= 
            {
              FormalLists_AST RESULT =null;
		
        RESULT = null; 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalLists",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FormalLists ::= FormalLists COMA Type ID 
            {
              FormalLists_AST RESULT =null;
		int flsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int flsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FormalLists_AST fls = (FormalLists_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type_AST t = (Type_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol id = new Symbol(sym.ID,izq,der,i);
        RESULT = new varias_FormalLists_AST(t,id,fls);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalLists",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FormalList ::= 
            {
              FormalList_AST RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FormalList ::= Type ID FormalLists 
            {
              FormalList_AST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type_AST t = (Type_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalLists_AST fl = (FormalLists_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol id = new Symbol(sym.ID,izq2,der2,i); 
        RESULT = new varias_FormalList_AST(t,id,fl);       
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VarDecls ::= 
            {
              VarDeclarations_AST RESULT =null;
		
        RESULT = null;   
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VarDecls ::= VarDecls VarDecl 
            {
              VarDeclarations_AST RESULT =null;
		int vdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclarations_AST vds = (VarDeclarations_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclaration_AST vd = (VarDeclaration_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new varVarDeclsAST(vd,vds);   
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ConstrDecl ::= PUBLIC ID PARENT_ON FormalList PARENT_OFF LLAVE_ON VarDecl Statement LLAVE_OFF 
            {
              ConstrDeclaration_AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FormalList_AST fl = (FormalList_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclaration_AST vd = (VarDeclaration_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement_AST s = (Statement_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Symbol id = new Symbol(sym.ID,izq,der,i); *****************
        RESULT = new DefConstrAST(id,fl,vd,s); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrDecl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Type ::= ID2 
            {
              Type_AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol id = new Symbol(sym.ID2,izq,der,i);
        RESULT = new Type_Id_AST(id);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= TINT 
            {
              Type_AST RESULT =null;
		
        RESULT = new Type_TInt_AST();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= BOOLEAN 
            {
              Type_AST RESULT =null;
		
        RESULT = new Type_Boolean_AST();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= INT 
            {
              Type_AST RESULT =null;
		
        RESULT = new Type_Int_AST();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarDecl ::= Type ID PUNTO_COMA 
            {
              VarDeclaration_AST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type_AST t = (Type_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Symbol id = new Symbol(sym.ID,izq2,der2,i);  
        RESULT = new Tid_AST(t,id);   
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BodyDeclA ::= ClassDecl 
            {
              BodyDeclarationA_AST RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDeclaration_AST cd = (ClassDeclaration_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Class_Declaration_AST(cd);  
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BodyDeclA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BodyDeclA ::= MethodDecl 
            {
              BodyDeclarationA_AST RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDeclaration_AST md = (MethodDeclaration_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Method_Declaration_AST(md);   
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BodyDeclA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BodyDeclA ::= ConstrDecl 
            {
              BodyDeclarationA_AST RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstrDeclaration_AST cd = (ConstrDeclaration_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Construct_Declaration_AST(cd);  
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BodyDeclA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BodyDeclA ::= VarDecl 
            {
              BodyDeclarationA_AST RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclaration_AST vd = (VarDeclaration_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new VarDeclarationA_AST(vd);  
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BodyDeclA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BodyDecl ::= 
            {
              BodyDeclaration_AST RESULT =null;
			
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BodyDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BodyDecl ::= BodyDecl BodyDeclA 
            {
              BodyDeclaration_AST RESULT =null;
		int bdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyDeclaration_AST bd = (BodyDeclaration_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bdaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bdaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyDeclarationA_AST bda = (BodyDeclarationA_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new varias_Body_Declaration_AST(bda,bd);   
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BodyDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ClassDeclC ::= IMPLEMENTS 
            {
              ClassDeclarationC_AST RESULT =null;
		
        RESULT = new Implements_AST();  
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ClassDeclC ::= EXTENDS 
            {
              ClassDeclarationC_AST RESULT =null;
		
        RESULT = new Extends_AST(); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ClassDeclB ::= ClassDeclC ID 
            {
              ClassDeclarationB_AST RESULT =null;
		int cdcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cdcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassDeclarationC_AST cdc = (ClassDeclarationC_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol id = new Symbol(sym.ID,izq,der,i); 
        RESULT = new Class_DeclarationB_AST(id,cdc); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclB",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ClassDeclA ::= 
            {
              ClassDeclarationA_AST RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ClassDeclA ::= CLASS ID ClassDeclB 
            {
              ClassDeclarationA_AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDeclarationB_AST cdb = (ClassDeclarationB_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol id = new Symbol(sym.ID,izq,der,i); 
        RESULT = new Class_DeclarationA_AST(id,cdb);  
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ClassDecl ::= ClassDeclA LLAVE_ON BodyDecl LLAVE_OFF 
            {
              ClassDeclaration_AST RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ClassDeclarationA_AST cd = (ClassDeclarationA_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyDeclaration_AST bd = (BodyDeclaration_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Body_AST(cda,bd);    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ClassDecls ::= 
            {
              ClassDeclarationsAST RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecls",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ClassDecls ::= ClassDecls ClassDecl 
            {
              ClassDeclarationsAST RESULT =null;
		int cdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassDeclarationsAST cds = (ClassDeclarationsAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDeclaration_AST cd = (ClassDeclaration_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new varias_Class_Declarations_AST(cd,cds); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecls",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ImportDeclA ::= 
            {
              ImportDeclarationA_AST RESULT =null;
		
        RESULT= null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportDeclA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ImportDeclA ::= PUNTO_AST 
            {
              ImportDeclarationA_AST RESULT =null;
		
        RESULT= new PuntoAst_AST();    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportDeclA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TypeNames ::= 
            {
              TypeNames_AST RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeNames",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TypeNames ::= TypeNames PUNTO ID 
            {
              TypeNames_AST RESULT =null;
		int tnsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tnsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeNames_AST tns = (TypeNames_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol id = new Symbol(sym.ID,izq,der,i);  
        RESULT = new Type_Names_AST(id,tns); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeNames",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TypeName ::= ID TypeNames 
            {
              TypeName_AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeNames_AST tn = (TypeNames_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Symbol id = new Symbol(sym.ID,izq,der,i);  
        RESULT = new varias_TypeName_AST(id,tn);        
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeName",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ImportDecl ::= IMPORT TypeName ImportDeclA PUNTO_COMA 
            {
              ImportDeclaration_AST RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeName_AST tn = (TypeName_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ImportDeclarationA_AST id = (ImportDeclarationA_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Import_Type_AST(tn,id); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ImportDecls ::= 
            {
              ImportDeclarations_AST RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportDecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ImportDecls ::= ImportDecls ImportDecl 
            {
              ImportDeclarations_AST RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ImportDeclarations_AST ids = (ImportDeclarations_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ImportDeclaration_AST id = (ImportDeclaration_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Varias_Import_AST(ids,id);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImportDecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ImportDecls ClassDecls MainClass 
            {
              Program_AST RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ImportDeclarations_AST id = (ImportDeclarations_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassDeclarationsAST cd = (ClassDeclarationsAST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MainClass_AST mc = (MainClass_AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        parser.raiz = new ImpD_ClassD_MainC_AST(id,cd,mc); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program_AST start_val = (Program_AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

