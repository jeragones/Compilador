import java_cup.runtime.*;
import AST.*;

parser code {:
	
	Scanner scanner;
	AST raiz;	

	public parser(java.io.Reader input){
	scanner = new Scanner(input);
	
	}

public String errores(int sys)
	{
		if (sys == 2)
			return("IMPORT");
		else if (sys == 3)
			return("PUNTO");
		else if (sys == 4)
			return("ASTERISCO");
		else if (sys == 5)
			return("PUNTO_COMA");
		else if (sys == 6)
			return("ID");
		else if (sys == 7)
			return("CLASS");
		else if (sys == 8)
			return("PUBLIC");
		else if (sys == 9)
			return("STATIC");
		else if (sys == 10)
			return("VOID");
		else if (sys == 11)
			return("MAIN");
		else if (sys == 12)
			return("TSTRING");
		else if (sys == 13)
			return("CORCHETE_ON");
		else if (sys == 14)
			return("CORCHETE_OFF");
		else if (sys == 15)
			return("PARENT_ON");
		else if (sys == 16)
			return("PARENT_OFF");
		else if (sys == 17)
			return("LLAVE_OFF");
		else if (sys == 18)
			return("LLAVE_ON");
		else if (sys == 19)
			return("EXTENDS");
		else if (sys == 20)
			return("IMPLEMENTS");
		else if (sys == 21)
			return("RETURN");
		else if (sys == 22)
			return("COMA");
		else if (sys == 23)
			return("BOOLEAN");
		else if (sys == 24)
			return("IF");
		else if (sys == 25)
			return("ELSE");
		else if (sys == 26)
			return("WHILE");
		else if (sys == 27)
			return("SYSTEM");
		else if (sys == 28)
			return("OUT");	
		else if (sys == 29)
			return("PRINTLN");
		else if (sys == 30)
			return("EXIT");
		else if (sys == 31)
			return("TINT");
		else if (sys == 32)
			return("IGUAL");
		else if (sys == 33)
			return("IN");
		else if (sys == 34)
			return("NUMERO");
		else if (sys == 35)
			return("READ");
		else if (sys == 36)
			return("THIS");
		else if (sys == 37)
			return("LENGTH");
		else if (sys == 38)
			return("TRUE");
		else if (sys == 39)
			return("FALSE");
		else if (sys == 40)
			return("NEW");
		else if (sys == 41)
			return("NEGACION");
		else if (sys == 42)
			return("STRING");
		else if (sys == 43)
			return("SUMA");
		else if (sys == 44)
			return("RESTA");
		else if (sys == 45)
			return("DIV");
		else if (sys == 46)
			return("DIFERENCIA");
		else if (sys == 47)
			return("IGUAL_COMP");
		else if (sys == 48)
			return("MENOR");
		else if (sys == 49)
			return("MENOR_IGUAL");
		else if (sys == 50)
			return("MAYOR_IGUAL");
		else if (sys == 51)
			return("MAYOR");
		else if (sys == 52)
			return("OR");
		else if (sys == 53)
			return("AND");
		else if (sys == 54)
			return("PUNTO_AST");
		else if (sys == 55)
			return("TINT");
		else if (sys == 56)
			return("ID2");
		else if (sys == 57)
			return("INT");
		else 
			return("ERROR");
	}

	public void syntax_error(Symbol cur_token2)
	{
                if (cur_token.sym == 2)
                        report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 3)
			report_error("No se esperaba un .", cur_token2);
		else if (cur_token.sym == 4)
			report_error("No se esperaba un *", cur_token2);
		else if (cur_token.sym == 5)
			report_error("No se esperaba un ;", cur_token2);
		else if (cur_token.sym == 6)
			report_error("No se esperaba un ID", cur_token2);
		else if (cur_token.sym == 7)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 8)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 9)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 10)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 11)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 12)
			report_error("No se esperaba un Tipo STRING", cur_token2);
		else if (cur_token.sym == 13)
			report_error("No se esperaba un [", cur_token2);
		else if (cur_token.sym == 14)
			report_error("No se esparaba un ]", cur_token2);
		else if (cur_token.sym == 15)
			report_error("No se esperaba un (", cur_token2);
		else if (cur_token.sym == 16)
			report_error("No se esperaba un )", cur_token2);
		else if (cur_token.sym == 17)
			report_error("No se esperaba un }", cur_token2);
		else if (cur_token.sym == 18)
			report_error("No se esperaba un {", cur_token2);
		else if (cur_token.sym == 19)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 20)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 21)
			report_error("No se esperaba un RETURN", cur_token2);
		else if (cur_token.sym == 22)
			report_error("No se esparaba una ,", cur_token2);
		else if (cur_token.sym == 23)
			report_error("No se esperaba un Boolean", cur_token2);
		else if (cur_token.sym == 24)
			report_error("No se esperaba un IF", cur_token2);
		else if (cur_token.sym == 25)
			report_error("No se esperaba un ELSE", cur_token2);
		else if (cur_token.sym == 26)
			report_error("No se esperaba un WHILE", cur_token2);
		else if (cur_token.sym == 27)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 28)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 29)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 30)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 31)
			report_error("No se esperaba un Tipo INT", cur_token2);
		else if (cur_token.sym == 32)
			report_error("No se esperaba un =", cur_token2);
		else if (cur_token.sym == 33)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 34)
			report_error("No se esperaba un Numero", cur_token2);
		else if (cur_token.sym == 35)
			report_error("No se esparaba un TOKEN", cur_token2);
		else if (cur_token.sym == 36)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 37)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 38)
			report_error("No se esperaba un TRUE", cur_token2);
		else if (cur_token.sym == 39)
			report_error("No se esperaba un FALSE", cur_token2);
		else if (cur_token.sym == 40)
			report_error("No se esperaba un TOKEN", cur_token2);
		else if (cur_token.sym == 41)
			report_error("No se esparaba una !", cur_token2);
		else if (cur_token.sym == 42)
			report_error("No se esperaba un STRING", cur_token2);
		else if (cur_token.sym == 43)
			report_error("No se esperaba una +", cur_token2);
		else if (cur_token.sym == 44)
			report_error("No se esperaba una -", cur_token2);
		else if (cur_token.sym == 45)
			report_error("No se esperaba una /", cur_token2);
		else if (cur_token.sym == 46)
			report_error("No se esperaba un !=", cur_token2);
		else if (cur_token.sym == 47)
			report_error("No se esperaba un ==", cur_token2);
		else if (cur_token.sym == 48)
			report_error("No se esperaba un <", cur_token2);
		else if (cur_token.sym == 49)
			report_error("No se esperaba un <=", cur_token2);
		else if (cur_token.sym == 50)
			report_error("No se esperaba un >=", cur_token2);
		else if (cur_token.sym == 51)
			report_error("No se esperaba un >", cur_token2);
		else if (cur_token.sym == 52)
			report_error("No se esperaba un OR", cur_token2);
		else if (cur_token.sym == 53)
			report_error("No se esperaba un AND", cur_token2);
		else if (cur_token.sym == 54)
			report_error("No se esperaba un .*", cur_token2);
		else if (cur_token.sym == 55)
			report_error("No se esperaba un Tipo INT[]", cur_token2);
		else if (cur_token.sym == 56)
			report_error("No se esperaba un ID", cur_token2);
		else if (cur_token.sym == 57)
			report_error("No se esperaba un Tipo INT", cur_token2);
		else 
			report_error("Error: ", cur_token2);
	
	}

public void report_error(String message, Object info) {
	StringBuffer m = new StringBuffer("Error ");
	
	if (info instanceof java_cup.runtime.Symbol) {
		m.append( "(" + errores(cur_token.sym) +")" );
	     	m.append(" en fila "+ cur_token.left + " columna " + cur_token.right );
	     
	     	if (((java_cup.runtime.Symbol)info).value != null)
	       		m.append(". Lexema: " + cur_token.value.toString()); 
	}
	m.append(" : "+message);
	m.append(" y en su lugar viene " + ((java_cup.runtime.Symbol)info).value.toString());

	System.out.println(m);
}

   
public void report_fatal_error(String message, Object info) 	{
	report_error(message, info);
	throw new RuntimeException("Error Fatal de Sintaxis!!!");
}

:}

terminal  NEGACION;
terminal  NEW;
terminal  SUMA;
terminal  EXIT;
terminal  MENOR_IGUAL;
terminal  MAIN;
terminal  RESTA;
terminal  THIS;
terminal  PARENT_ON;
terminal  MENOR;
terminal  PRINTLN;
terminal  RETURN;
terminal  LLAVE_OFF;
terminal  DIFERENCIA;
terminal  TRUE;
terminal  COMA;
terminal  MAYOR_IGUAL;
terminal  IGUAL;
terminal  CORCHETE_ON;
terminal  VOID;
terminal  IMPORT;
terminal  CLASS;
terminal  String ID2;
terminal  ELSE;
terminal  TSTRING;
terminal  READ;
terminal  DIV;
terminal  BOOLEAN;
terminal  PUBLIC;
terminal  EOF;
terminal  PARENT_OFF;
terminal  ERROR;
terminal  OR;
terminal  IN;
terminal  ASTERISCO;
terminal  LENGHT;
terminal  PUNTO_AST;
terminal  SYSTEM;
terminal  PUNTO;
terminal  String NUMERO;
terminal  IF;
terminal  INT;
terminal  CORCHETE_OFF;
terminal  String ID;
terminal  WHILE;
terminal  LLAVE_ON;
terminal  IMPLEMENTS;
terminal  OUT;
terminal  EXTENDS;
terminal  IGUAL_COMP;
terminal  MAYOR;
terminal  AND;
terminal  FALSE;
terminal  PUNTO_COMA;
terminal  TINT;
terminal  STATIC;
terminal  String STRING;



non terminal Program_AST Program;
non terminal ImportDeclarations_AST ImportDecls;
non terminal ImportDeclaration_AST ImportDecl;
non terminal TypeName_AST TypeName;
non terminal TypeNames_AST TypeNames;
non terminal ImportDeclarationA_AST ImportDeclA;
non terminal ClassDeclarationsAST ClassDecls;
non terminal ClassDeclaration_AST ClassDecl;
non terminal ClassDeclarationA_AST ClassDeclA;
non terminal ClassDeclarationB_AST ClassDeclB;
non terminal ClassDeclarationC_AST ClassDeclC;
non terminal BodyDeclaration_AST BodyDecl;
non terminal BodyDeclarationA_AST BodyDeclA;
non terminal VarDeclaration_AST VarDecl;
non terminal Type_AST Type;
non terminal ConstrDeclaration_AST ConstrDecl;
non terminal VarDeclarations_AST VarDecls;
non terminal FormalList_AST FormalList;
non terminal FormalLists_AST FormalLists;
non terminal MethodDeclaration_AST MethodDecl;
non terminal IdAux_AST IdAux;
non terminal Return_AST Auxiliar;
non terminal MainClass_AST MainClass;
non terminal Statement_AST Statement;
non terminal ExpresionA_AST ExpA;
non terminal Expresion_AST Exp;
non terminal ExpresionSimpl_AST ExpSimpl;
non terminal ExpresionList_AST ExpList;
non terminal ExpresionLists_AST ExpLists;
non terminal ExpresionInt_AST ExpI;
non terminal TipysAST Types;
non terminal Op_AST Op;
non terminal StatementA_AST StatementA;
non terminal IdAux_AST IDAux;
non terminal ExpresionB_AST ExpB;
non terminal Statements_AST Statements;


precedence left ID;
precedence left MENOR;
precedence left MAYOR;
precedence left MENOR_IGUAL;
precedence left MAYOR_IGUAL;
precedence left DIFERENCIA;
precedence left IGUAL_COMP;
precedence left ELSE;
precedence left PUNTO;
precedence left CORCHETE_ON;
precedence left OR;
precedence left AND;
precedence left SUMA;
precedence left RESTA;
precedence left ASTERISCO;
precedence left DIV;

start with Program;

// Regla 01)
Program ::= ImportDecls:id ClassDecls:cd MainClass:mc
    {:
        parser.raiz = new ImpD_ClassD_MainC(id,cd,mc); ******************************************************
    :}
;

// Regla 02)
ImportDecls ::= ImportDecls:ids ImportDecl:id ; 
    {:
        RESULT = new varImportAST(s,d); ************************************************
    :} 
    | 
    {:
        RESULT = null;
    :}
;

// Regla 03)
ImportDecl ::= IMPORT TypeName:tn ImportDeclA:id PUNTO_COMA
    {:
        RESULT = new impTypeAST(tn,imp1); ***********************************************		
    :} 
;

// Regla 04)
TypeName ::= ID:i TypeNames:tn
    {:
        Symbol id = new Symbol(sym.ID,ileft,iright,i);  ************************************
        RESULT = new varTypeNameAST(id,tn);         ****************
    :}
;

// Regla 05)
TypeNames ::= TypeNames:tn PUNTO ID:i
    {:
        Symbol id = new Symbol(sym.ID,ileft,iright,i);  *******************************
        RESULT = new TNamesAST(id,tns); ***************
    :}
    |
    {:
        RESULT = null;
    :}
;

// Regla 06)
ImportDeclA ::= PUNTO_AST
    {:
        RESULT= new conPuntoAsteriscoAST();    *******************************************
    :}
    |
    {:
        RESULT= null;
    :}
;

// Regla 07) 
ClassDecls ::=  ClassDecls:cds ClassDecl:cd
    {:
        RESULT = new varClassDeclsAST(cd,cds); ****************************************
    :}
    | 
    {:
        RESULT = null;
    :}
;

// Regla 08)
ClassDecl ::= ClassDeclA:cd LLAVE_ON BodyDecl:bd LLAVE_OF  ;
    {:
        RESULT = new BodyCD1AST(cd,bd);    ******************************************
    :}
;

// Regla 09)
ClassDeclA ::= CLASS ID:i ClassDeclB:cd
    {:
        Symbol id = new Symbol(sym.ID,ileft,iright,i); ******************************** 
        RESULT = new CD2AST(id,cd);  **************************
    :}
    |
    {:
        RESULT = null;
    :}
;

// Regla 10)
ClassDeclB ::= ClassDeclC:cd ID:i
    {:
        Symbol id = new Symbol(sym.ID,ileft,iright,i); ********************************
        RESULT = new CD3AST(id,cd); ******************************************
    :}
;

// Regla 11)
ClassDeclC ::= Extends
    {:
        RESULT = new conEXTENDSAST();  *****************************
    :}	
    | IMPLEMENTS
    {:
        RESULT = new conImplementsAST();  **************************
    :}
;

// Regla 12)
BodyDecl ::= BodyDecl:bd BodyDeclA:bda
    {:
        RESULT = new varBodyDeclAST(bda,bd);   *****************************
    :} 
    |
    {:	
        RESULT = null;
    :}
;

// Regla 13)
BodyDeclA ::= VarDecl:vd     -> BodyDecl_1
    {:
        RESULT = new VariableDAST(vd);  ************************
    :}
    | ConstrDecl:cd
    {:
        RESULT = new ConstructorDAST(cd);  ***************************
    :} 
    | MethodDecl:md
    {:
        RESULT = new MethodDAST(md);   ***********************
    :}
    | ClassDecl:cd
    {:
        RESULT = new ClassDAST(cd);   ****************************
    :}
;

// Regla 14)
VarDecl ::= Type:t ID:i  PUNTO_COMA  **************************************
    {:
        Symbol id = new Symbol(sym.ID,i2left,i2right,i);  **********************
        RESULT = new TididAST(tp,id);   *********************
    :}
;

// Regla 15)
Type ::= _intcc
    {:
        RESULT = new TypeconIntccAST();
    :}
    | BOOLEAN
    {:
        RESULT = new TypeconBooleanAST();
    :}
    | _int
    {:
        RESULT = new TypeconIntAST();
    :}       
    | IDT:i
    {:
        Symbol id = new Symbol(sym.IDT,ileft,iright,i);
        RESULT = new TypeconIdAST(id);
    :}
;

// Regla 16)
ConstrDecl ::= PUBLIC ID:i PARENT_on  FormalList:fl PARENT_off Llave_on VarDecl:vd Statement:s Llave_off
    {:
        Symbol id = new Symbol(sym.ID,ileft,iright,i); *****************
        RESULT = new DefConstrAST(id,fl,vd,s); ***************************
    :}	
;

// Regla 17)
VarDecls ::=	VarDecls:vds VarDecl:vd 
    {:
        RESULT = new varVarDeclsAST(vd,vds);   ********************************
    :}
    |
    {:
        RESULT = null;   
    :}
;

// Regla 18)
FormalList ::= Type:t ID:i FormalLists:fl
    {:
        Symbol id = new Symbol(sym.ID,i2left,i2right,i); *********************************
        RESULT = new varFormalListAST(t,id,fl);       ***************************************
    :} 
    |
    {:
        RESULT = null;
    :}   
;

// Regla 19)
FormalLists ::=	 FormalLists:fl COMA Type:t ID:i
    {:
        Symbol id = new Symbol(sym.ID,ileft,iright,i);
        RESULT = new varFormalListsAST(t,id,fl);
    :} 
    |  
    {:
        RESULT = null; 
    :} 
;

// Regla 20)
MethodDecl ::= PUBLIC IdAux:ia ID:i PARENT_on  FormalList:fl  PARENT_off Llave_on VarDecls:vd Statements:s Auxiliar:a Llave_off
    {:
        Symbol id = new Symbol(sym.ID,ileft,iright,i);  **********************************
        RESULT = new DefMethodDeclAST(id,ia,fl,vd,s,a);   ******************************** 
    :} 	
;

// Regla 21)
IdAux ::=  Type:t
    {:
        RESULT = new conIdAST(t);
    :} 
    | VOID
    {:
        RESULT = new conVoidAST();
    :}
;

// Regla 22)
Auxiliar ::=  RETURN Exp:e PUNTO_COMA
    {:
        RESULT = new DefReturnAST(e);
    :}  
    | 
    {:
        RESULT = null;
    :}
;

// Regla 23)
MainClass ::= Class ID:i1 Llave_on PUBLIC STATIC Void Main  PARENT_on  STRING Corchete_on ID:i2 PARENT_off Llave_on Statement:s Llave_off Llave_off
    {:
        Symbol i1 = new Symbol(sym.ID,i1left,i1right,i1);    ************************************
        Symbol i2 = new Symbol(sym.ID,i2left,i2right,i2); **************
        RESULT = new DefMainAST(i1,i2,s);  *************
    :}
;

// Regla 24)
Statement ::=	ID:i IGUAL ExpA:ea PUNTO_COMA
    {:
        Symbol id = new Symbol(sym.ID,ileft,iright,i);
        RESULT = new asigStatAST(id,ea);
    :} 
    | IDAux:ia PUNTO ID:i PARENT_ON ExpList:el PARENT_OFF PUNTO_COMA
    {:
        Symbol id = new Symbol(sym.ID,ileft,iright,i);
        RESULT = new ExplistStatAST(id,ia,el);
    :}     | ID:i Cuad_Exp:ce IGUAL Exp_Demas:ed PUNTO_COMA
    | ID:i ExpB:eb IGUAL ExpA:ea PUNTO_COMA
    {:
        Symbol id = new Symbol(sym.ID,ileft,iright,i);
        RESULT = new ExpStatAST(id,eb,ea);
    :} 
    | SYSTEM PUNTO EXIT PARENT_ON _numero:n PARENT_OFF PUNTO_COMA
    {:
        Symbol n = new Symbol(sym._numero,nleft,nright,n);
        RESULT = new exitStatAST(n1);
    :}
    |CORCHETE_ON Statements:s CORCHETE_OFF
    {:
        RESULT = new varStatAST(s);
    :}
    | IF PARENT_ON Exp:e PARENT_OFF Statement:s StatementA:ea
    {:
        RESULT = new ifelseStatAST(e,s,ea);
    :} 
    | WHILE PARENT_ON Exp:e PARENT_OFF Statement:s
    {:
        RESULT = new whileStatAST(e,s);
    :}
    | SYSTEM PUNTO OUT PUNTO PRINTLN PARENT_ON Exp:e PARENT_OFF PUNTO_COMA
    {:
        RESULT = new printlnStatAST(e);
    :} 
;

// Regla 25)
ExpA ::=  Exp:e
    {:
        RESULT = new  solaExpAST(e);
    :}  
    | PARENT_ON Type:t PARENT_OFF SYSTEM PUNTO IN PUNTO _read PARENT_ON PARENT_OFF
    {:
        RESULT = new ExpReadAST(t);
    :}
;

// Regla 26)
Exp ::= ExpSimpl:es ExpI:ei
    {:
            RESULT = new DefExpAST(es,ei);
    :} 
;

// Regla 27)
ExpSimpl ::= ID:i
    {:
        Symbol id = new Symbol(sym.ID,ileft,iright,i);
        RESULT = new Exp_SimplIdAST(id);
    :}
    | _true
    {:
        RESULT= new Exp_SimpltrueAST();
    :}
    | _false
    {:
        RESULT= new Exp_SimplfalseAST();
    :}
    | _numero:n
    {:
        Symbol nn = new Symbol(sym._numero,nleft,nright,n);
        RESULT= new Exp_SimplNumeroAST(nn);
    :}
    | _this
    {:
        RESULT= new Exp_SimplthisAST();
    :}
    | _new TINT CORCHETE_ON Exp:e CORCHETE_OFF
    {:
        RESULT = new ExpnewIntAST(e);
    :} 
    | _new ID:i PARENT_ON ExpList:e PARENT_OFF
    {:
        Symbol id = new Symbol(sym.ID,ileft,iright,i);
        RESULT = new ExpnewidAST(id,e);
    :} 
    | _negacion Exp:e
    {:
        RESULT = new ExpnegAST(e);
    :} 
    | PARENT_ON Exp:e PARENT_OFF
    {:
        RESULT = new ExpredAST(e);
    :} 
    | _String:s
    {:
        Symbol ss = new Symbol(sym._String,sleft,sright,s);
        RESULT = new Exp_SimplStringAST(ss);
    :}
;

// Regla 28)
ExpList ::= Exp:e ExpLists:el
    {:
        RESULT = new  ExplAST(e,el); 
    :} 
    | 
    {:
        RESULT = null;
    :} 
;

// Regla 29)
ExpLists ::= ExpLists:el COMA Exp:e
    {:
        RESULT = new varExpListsAST(e,el);
    :} 
    |  
    {:
        RESULT = null; 
    :} 
;

// Regla 30)
ExpI ::= Types:t ExpI:ei
    {:
        RESULT = new tipExpAST(t,ei);
    :} 
    | 
    {:
        RESULT = null; 
    :}  
;

// Regla 31)
Types ::=  PUNTO ID:i PARENT_ON ExpList:el PARENT_OFF
    {:
        Symbol id = new Symbol(sym.ID,ileft,iright,i);
        RESULT = new TipoListaAST(id,el);
    :}
    | Op:o Exp:e
    {:
        RESULT = new TipoOpAST(o,e);
    :}  
    | CORCHETE_ON Exp:e CORCHETE_OFF
    {:
        RESULT = new TipoCuadrAST(e);
    :} 
    | PUNTO _length 
    {:
        RESULT= new TipoLengthAST();
    :}
;

// Regla 32)
StatementA ::= ELSE Statement:S
    {:
        RESULT = new elseStatAST(s);  *************************
    :} 
    |
    {:
        RESULT = null;
    :} 
;

// Regla 33)
IDAux ::=  _this 
    {:
        RESULT = new ThisconThisAST();
    :}
    | ID:i
    {:
        Symbol id = new Symbol(sym.ID,ileft,iright,i);
        RESULT = new ThisconIDAST(id);
    :}
;

// Regla 34)
ExpB ::=  CORCHETE_ON Exp:e CORCHETE_OFF
    {:
        RESULT = new unaExpAST(e);
    :}  
;

// Regla 35)
Statements ::=	Statements:ss Statement:s 
    {:
        RESULT = new varStatementsAST(s,ss); 
    :} 
    |
    {:   
        RESULT = null;
    :}
;